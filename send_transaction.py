import requests
import random
from datetime import datetime
import pytz
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
ETHERSCAN_API_KEY = '3JTRMXERPSTG1AY9AV1ZYD1WGRHZNEU3VI'  # API –∫–ª—é—á –¥–ª—è Etherscan (ERC20)
BSC_SCAN_API_KEY = '7C2J1YVTVAAER9TSDZHAC6WK8Z3Y5B8ABI'  # API –∫–ª—é—á –¥–ª—è BscScan (BEP20)
TELEGRAM_BOT_TOKEN = '6482784614:AAEgqlW2JhisaGyo26WYVytrgl-8F-Nwlmk'  # –¢–æ–∫–µ–Ω –¥–ª—è Telegram Bot
TELEGRAM_CHAT_ID = '-1002133823734'  # ID —á–∞—Ç–∞ Telegram

# –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω
NAMES = ["Invoice", "Alex0z", "CPA-Master", "0x27ox", "Hawk", "Mark", "Rick Owens"]

def round_up(value: float, multiple: float) -> float:
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞, –∫—Ä–∞—Ç–Ω–æ–≥–æ multiple."""
    return multiple * (value // multiple)

def get_random_erc20_transaction(api_key, min_value, max_value):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é USDT –∏–∑ Etherscan."""
    usdt_contract_address = "0xdac17f958d2ee523a2206206994597c13d831ec7"
    url = "https://api.etherscan.io/api"

    params = {
        "module": "account",
        "action": "tokentx",
        "contractaddress": usdt_contract_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "page": 1,
        "offset": 100,
        "apikey": api_key
    }

    try:
        print("–ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ Etherscan...")
        response = requests.get(url, params=params)
        response.raise_for_status()
        transactions = response.json().get('result', [])
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

        filtered_transactions = [
            tx for tx in transactions if min_value <= float(tx['value']) / 10**6 <= max_value
        ]

        if filtered_transactions:
            return random.choice(filtered_transactions)
        else:
            print("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
            return None

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Etherscan: {e}")
        return None

def get_random_bep20_transaction(api_key, min_value, max_value):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é USDT –∏–∑ BscScan."""
    usdt_contract_address = "0x55d398326f99059ff775485246999027b3197955"
    url = "https://api.bscscan.com/api"

    params = {
        "module": "account",
        "action": "tokentx",
        "contractaddress": usdt_contract_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "page": 1,
        "offset": 100,
        "apikey": api_key
    }

    try:
        print("–ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ BscScan...")
        response = requests.get(url, params=params)
        response.raise_for_status()
        transactions = response.json().get('result', [])
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

        filtered_transactions = [
            tx for tx in transactions if min_value <= float(tx['value']) / 10**18 <= max_value
        ]

        if filtered_transactions:
            return random.choice(filtered_transactions)
        else:
            print("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
            return None

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ BscScan: {e}")
        return None

def send_message(token, chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {"chat_id": chat_id, "text": message, "parse_mode": "HTML"}
    
    try:
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...")
        response = requests.post(url, data=data)
        response.raise_for_status()
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç Telegram: {response.json()}")
        return response
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return None

def main():
    print("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")
    
    min_value = 300
    max_value = 1100

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–µ—Ç—å (ERC20 –∏–ª–∏ BEP20)
    network_choice = random.choice(['ERC20', 'BEP20'])
    print(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ—Ç—å: {network_choice}")

    if network_choice == 'ERC20':
        transaction = get_random_erc20_transaction(ETHERSCAN_API_KEY, min_value, max_value)
        unit = 10**6
    else:
        transaction = get_random_bep20_transaction(BSC_SCAN_API_KEY, min_value, max_value)
        unit = 10**18

    if transaction:
        amount_usdt = float(transaction['value']) / unit
        tx_hash = transaction['hash']
        timestamp = int(transaction['timeStamp'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        europe_zone = pytz.timezone('Europe/Berlin')
        date_time = datetime.fromtimestamp(timestamp, europe_zone).strftime('%H:%M:%S %d-%m-%Y')

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞
        profit_name = random.choice(NAMES)

        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å—É–º–º—ã –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞, –∫—Ä–∞—Ç–Ω–æ–≥–æ 10
        rounded_amount = round_up(amount_usdt, 10)
        worker_share = rounded_amount / 2

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"üí≤ –ü—Ä–æ—Ñ–∏—Ç —É: {profit_name}\n"
            f"‚î† –°—É–º–º–∞ –∑–∞–Ω–æ—Å–∞: <b>{rounded_amount:.2f}</b> USDT <i>({network_choice})</i>\n"
            f"‚îñ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: <b>{worker_share:.2f}</b> USDT <i>({network_choice})</i>\n\n"
            
            f"üß¨ Hash: <code>{tx_hash}</code>\n"
            f"üïî –í—Ä–µ–º—è: {date_time}"
        )

        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        delay = random.randint(60, 900)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 1 –¥–æ 15 –º–∏–Ω—É—Ç (60 –¥–æ 900 —Å–µ–∫—É–Ω–¥)
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è...")
        time.sleep(delay)

        response = send_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, message)

        if response and response.status_code == 200:
            print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.")

if __name__ == "__main__":
    main()
