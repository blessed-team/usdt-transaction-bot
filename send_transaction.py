import os
import requests
import random
from datetime import datetime
import pytz
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ETHERSCAN_API_KEY = '3JTRMXERPSTG1AY9AV1ZYD1WGRHZNEU3VI'
TELEGRAM_BOT_TOKEN = '6482784614:AAEgqlW2JhisaGyo26WYVytrgl-8F-Nwlmk'
TELEGRAM_CHAT_ID = '-1002133823734'
TRON_API_KEY = '175a5b7f-e2c2-4a3a-9bd9-bf2041feb02c'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á API –¥–ª—è Tron
NAMES = ["Invoice", "Alex0z", "CPA-Master", "0x27ox", "Hawk", "Mark", "Rick Owens"]

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
LAST_RUN_FILE = 'last_run.txt'

def get_last_run_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(LAST_RUN_FILE):
        with open(LAST_RUN_FILE, 'r') as f:
            return float(f.read().strip())
    return 0

def update_last_run_time():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–∞–π–ª–µ."""
    with open(LAST_RUN_FILE, 'w') as f:
        f.write(str(time.time()))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ERC20
def get_random_usdt_transaction_erc20(api_key, min_value, max_value):
    usdt_contract_address = "0xdac17f958d2ee523a2206206994597c13d831ec7"
    url = "https://api.etherscan.io/api"

    params = {
        "module": "account",
        "action": "tokentx",
        "contractaddress": usdt_contract_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "page": 1,
        "offset": 100,
        "apikey": api_key
    }

    try:
        print("–ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ Etherscan...")
        response = requests.get(url, params=params)
        response.raise_for_status()
        transactions = response.json().get('result', [])
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

        filtered_transactions = [
            tx for tx in transactions if min_value <= float(tx['value']) / 10**6 <= max_value
        ]

        if filtered_transactions:
            return random.choice(filtered_transactions)
        else:
            print("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
            return None

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Etherscan: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TRC20
def get_random_usdt_transaction_trc20(api_key, min_value, max_value):
    url = "https://api.trongrid.io/v1/accounts/TADDRESS/transactions/trc20"

    headers = {
        "TRON-PRO-API-KEY": api_key
    }

    try:
        print("–ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ Tron...")
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        transactions = response.json().get('data', [])
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

        filtered_transactions = [
            tx for tx in transactions if min_value <= float(tx['value']) <= max_value
        ]

        if filtered_transactions:
            return random.choice(filtered_transactions)
        else:
            print("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
            return None

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Tron: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_message(token, chat_id, message):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {"chat_id": chat_id, "text": message, "parse_mode": "HTML"}
    
    try:
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...")
        response = requests.post(url, data=data)
        response.raise_for_status()
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram: {response.json()}")
        return response
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return None

def main():
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    last_run = get_last_run_time()
    current_time = time.time()

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ—Ç 1 –¥–æ 2 —á–∞—Å–æ–≤)
    min_interval = 3600
    max_interval = 7200

    if current_time - last_run < min_interval:
        print("–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü—Ä–æ–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return

    min_value = 300
    max_value = 1400

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–µ—Ç—å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    network = random.choice(["ERC20", "TRC20"])

    if network == "ERC20":
        transaction = get_random_usdt_transaction_erc20(ETHERSCAN_API_KEY, min_value, max_value)
    else:
        transaction = get_random_usdt_transaction_trc20(TRON_API_KEY, min_value, max_value)

    if transaction:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        amount_usdt = float(transaction['value']) / (10**6 if network == "ERC20" else 1)
        amount_usdt = (amount_usdt // 10) * 10  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–µ—Å—è—Ç–∫–∞ –≤–Ω–∏–∑
        tx_hash = transaction['hash']
        timestamp = int(transaction['timeStamp'])

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        europe_zone = pytz.timezone('Europe/Berlin')
        date_time = datetime.fromtimestamp(timestamp, europe_zone).strftime('%H:%M:%S %d-%m-%Y')

        # –°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
        profit_name = random.choice(NAMES)
        worker_share = amount_usdt / 2

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üí≤ –ü—Ä–æ—Ñ–∏—Ç —É: {profit_name}\n"
            f"‚î† –°—É–º–º–∞ –∑–∞–Ω–æ—Å–∞: {amount_usdt:.2f} USDT {network}\n"
            f"‚îñ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {worker_share:.2f} USDT\n\n"
            
            f"üß¨ Hash: <code>{tx_hash}</code>\n"
            f"üïî –í—Ä–µ–º—è: {date_time}"
        )

        response = send_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, message)

        if response and response.status_code == 200:
            print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            update_last_run_time()
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

if __name__ == "__main__":
    main()
